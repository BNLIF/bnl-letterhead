%!PS-Adobe-3.1 EPSF-3.0
%%Title: Logo Small Color_01.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0
%AI9_PrintingDataBegin
%%For: Lisa L Jansson
%%CreationDate: 9/19/01
%%CropBox: 0.000000 30.000000 225.137207 98.564453
%%BoundingBox: 0 30 226 99 
%%HiResBoundingBox: 0.000000 30.000000 225.137207 98.564453
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: font GillSans
%%DocumentSuppliedResources: procset Adobe_CoolType_Core 1.1 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: GillSans
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 1.1 0
%%Copyright: Copyright 1997-1999 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 1.1 0
userdict/Adobe_CoolType_Core 40 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def}if currentpacking true
setpacking/bdf{bind def}bind def/ldf{load def}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto ldf/nfnt/newencodedfont ldf/mfnt/makefont
ldf/sfnt/setfont ldf/ufnt/undefinefont ldf/chp/charpath ldf/awsh/awidthshow
ldf/wsh/widthshow ldf/ash/ashow ldf/sh/show ldf end userdict
/Adobe_CoolType_Data 2 dict dup begin/WidthShowArray 256 array def
/GenFauxMMInst{}bind def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if Adobe_CoolType_Core/unload get exec systemdict
/undef known{userdict/Adobe_CoolType_Data undef}if}bind def/page_setup{
Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict
/languagelevel known{systemdict/languagelevel get 2 ge{userdict
/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1
index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup
systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup
where pop exch get/globaldict where{pop end}if end end def/systemfindfont
/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1
index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1
add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dup null eq{pop}
{{def}forall}ifelse currentdict end exch setglobal}bdf/newencodedfont{findfont
dup length dict begin{1 index/FID ne{def}{pop pop}ifelse}forall/Encoding exch
def currentdict end definefont pop}bdf/scff{$SubstituteFont begin dup type
/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def
/$fontname 1 index dup type/stringtype eq{cvn}if def/$used false def end
findfont $SubstituteFont begin $used{currentglobal exch dup gcheck setglobal
null copyfont begin/FontName $fontname def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}if/$sname null def
/$slen 0 def end}bdf/ConcatStrings{dup 0 exch{length add}forall string exch 0
exch{3 copy putinterval length add}forall pop}bind def/BeginFauxMMFont{1 index
findfont pop 2 array astore ConcatStrings 3 1 roll($)exch 3 array astore
ConcatStrings exch findfont currentglobal exch dup gcheck setglobal null
copyfont/tempfontname exch definefont pop exch 12 dict begin/FontName exch def
/FontType 0 def/FMapType 6 def/FontMatrix matrix def/PaintType 0 def}bind def
/EndFauxMMFont{currentdict end dup/FontName get exch definefont exch setglobal
exch mfnt sfnt}bind def/GenFauxMMInst{Adobe_CoolType_Data/GenFauxMMInst get
exec}bind def/DefFauxMMInst{Adobe_CoolType_Data exch/GenFauxMMInst exch bind
put}bind def/WSALoop{4 copy 1 index add 1 sub 1 exch{3 copy put pop 1 add}for
pop pop 3 2 roll add exch 256 add}bind def/BuildWidthShowArray{currentfont
begin FontType 0 eq dup{pop FMapType 6 eq}if{SubsVector dup length 1 sub 1
exch getinterval}{()}ifelse end Adobe_CoolType_Data/WidthShowArray get 0 0 4 3
roll{WSALoop}forall 256 2 index sub WSALoop pop pop pop}bind def/wsa{
Adobe_CoolType_Data/WidthShowArray get}bind def/?set{3 index findfont dup
/FontName known{dup/FontName get/Courier eq{4 index/Courier eq}{true}ifelse
exch/DistillerFauxFont known not and}{pop pop false}ifelse{exch pop exch pop
exch 2 dict dup/Found 3 index put exch findfont exch}{exch exec exch findfont
2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont
definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index
type/integertype eq{exch true 4 2}{false 3 1}ifelse roll 1 index findfont
/Downloaded known{exec exch{exch ?str2 cvs exch findfont/Downloaded get 1 dict
begin/Downloaded 1 index def ?str1 cvs length ?str1 1 index 1 add 3 index
putinterval exch length 1 add 1 index add ?str1 2 index(*)putinterval ?str1 0
2 index getinterval cvn findfont ?str1 3 index(+)putinterval 2 dict dup
/FontName ?str1 0 6 index getinterval cvn put dup/Downloaded Downloaded put
end copyfont dup/FontName get exch definefont pop pop pop}{pop}ifelse}{pop
exch{findfont dup/Found get dup length exch ?str1 cvs pop ?str1 1 index(+)
putinterval ?str1 1 index 1 add 4 index ?str2 cvs putinterval ?str1 exch 0
exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn 1 dict exch 1 index
exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}
ifelse}ifelse}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def
/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{
currentfont/Downloaded known{moveto pop pop}{pop pop moveto}ifelse}bind def
setpacking end/currentdistillerparams where dup{pop pop currentdistillerparams
/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not
1 dict begin/SubstituteFont dup $error exch 2 copy known{get}{pop pop{pop
/Courier}bind}ifelse def userdict begin/$SubstituteFont 20 dict dup begin
/$used false def end def end{countdictstack array dictstack 0 get begin
userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128 string
def/$slen 0 def/$sname null def/$match false def/$fontname null def/$used
false def/$fontname null def/$italicangle 26.5 def/$findfontByEnum{dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def mark{$fontpat 0 $slen 7 add getinterval{/$match
exch def exit}$str filenameforall}stopped cleartomark/$slen 0 def $match false
ne{$match(fonts/)anchorsearch pop pop cvn/$used true def}{/Courier}ifelse}bind
def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light
/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]
def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light
/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def
/$cmapname null def/$buildfontname{length $str 1 index(-)putinterval 1 add
$str 1 index $cmapname $fontpat cvs putinterval $cmapname length add $str exch
0 exch getinterval cvn/$used true def}bind def/$findfontByROS{/$fontname exch
def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse
}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1 index
/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse
exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str
cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly
known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registry
get Registry eq exch/Ordering get Ordering eq and and{exch restore exch pop
true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{
$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$error
known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}
if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category
resourcestatus{pop pop{$SubstituteFont begin dup length $slen gt $sname null
ne or $slen 0 gt and{$sname null eq{dup $str cvs dup length $slen sub $slen
getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname
exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{pop
$findfontByEnum}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{
$SubstituteFont begin dup length $slen gt $sname null ne or $slen 0 gt and{
$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonly def}{
/findfont{$SubstituteFont begin dup systemfindfont $slen 0 gt $sname null ne 3
index length $slen gt or and{dup/FontName get dup/Courier eq exch 3 index ne
and{pop $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall $fontname currentdict end definefont}{exch pop}
ifelse}{exch pop}ifelse end}bind def}ifelse end end}if end
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^\tand at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job has content that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
1200 path_rez
1 -1 scale 0 -98.5645 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 98.5645 ln
225.137 98.5645 ln
225.137 0 ln
clp
164.209 1.3667 mo
163.021 -0.637695 158.833 -0.454102 151.754 1.9082 cv
150.067 2.47461 148.237 3.1543 146.275 3.94727 cv
135.707 8.21484 121.267 15.7441 104.023 25.9912 cv
83.9844 37.9033 61.9531 52.4092 40.3115 67.9438 cv
40.3115 67.9438 40.1089 68.0874 40.1621 68.1646 cv
40.2153 68.2417 40.4155 68.0898 40.4155 68.0898 cv
59.6348 54.5918 80.7822 41.1074 99.9629 30.123 cv
119.243 19.083 135.69 11.0566 146.275 7.52246 cv
153.506 5.10986 157.748 4.83594 158.885 6.70947 cv
160.511 9.39111 155.647 16.5874 145.023 27.2407 cv
145.096 27.3154 145.165 27.394 145.228 27.4751 cv
159.522 13.9131 166.195 4.72754 164.209 1.3667 cv
false op
0 0 0 0.3 cmyk
ef
20.9028 38.0591 mo
20.9028 37.8311 ln
23.145 37.8311 ln
28.1987 44.0312 ln
28.1987 39.2642 ln
28.1987 38.7554 28.1421 38.4395 28.0283 38.3135 cv
27.8779 38.1421 27.6411 38.0591 27.3164 38.0591 cv
27.0283 38.0591 ln
27.0283 37.8311 ln
29.9062 37.8311 ln
29.9062 38.0591 ln
29.6143 38.0591 ln
29.2632 38.0591 29.0156 38.1631 28.8691 38.3745 cv
28.7808 38.5044 28.7358 38.7998 28.7358 39.2642 cv
28.7358 46.2329 ln
28.5161 46.2329 ln
23.0669 39.5752 ln
23.0669 44.665 ln
23.0669 45.1753 23.1206 45.4907 23.231 45.6177 cv
23.3843 45.7866 23.6226 45.8716 23.9443 45.8716 cv
24.2368 45.8716 ln
24.2368 46.0981 ln
21.3589 46.0981 ln
21.3589 45.8716 ln
21.6465 45.8716 ln
21.9995 45.8716 22.249 45.7681 22.395 45.5542 cv
22.4854 45.4243 22.5298 45.1309 22.5298 44.665 cv
22.5298 38.9175 ln
22.29 38.6377 22.1074 38.4521 21.9844 38.3638 cv
21.8589 38.2739 21.6777 38.1885 21.4395 38.1128 cv
21.3198 38.0747 21.1421 38.0591 20.9028 38.0591 cv
0 0 0 1 cmyk
f
35.5059 39.5371 mo
36.9077 42.8794 ln
34.0674 42.8794 ln
35.5059 39.5371 ln
cp
37.8223 45.3662 mo
37.8223 45.5005 37.7661 45.6138 37.6484 45.7075 cv
37.5337 45.8022 37.311 45.856 36.9814 45.8716 cv
36.9814 46.0981 ln
40.2427 46.0981 ln
40.2427 45.8716 ln
39.9067 45.8521 39.6431 45.7598 39.4541 45.5962 cv
39.2651 45.4302 39.0552 45.0723 38.8232 44.5181 cv
35.9453 37.6411 ln
35.7324 37.6411 ln
32.8242 44.4463 ln
32.5732 45.0439 32.3423 45.4395 32.1357 45.6348 cv
32.0332 45.7319 31.8105 45.8115 31.4653 45.8716 cv
31.4653 46.0981 ln
34.0674 46.0981 ln
34.0674 45.8716 ln
33.6699 45.8442 33.4111 45.7803 33.2905 45.6875 cv
33.1704 45.5923 33.1108 45.4785 33.1108 45.3555 cv
33.1108 45.1968 33.1807 44.9556 33.3174 44.6353 cv
33.8779 43.3301 ln
37.0811 43.3301 ln
37.5791 44.5181 ln
37.7422 44.9048 37.8223 45.1865 37.8223 45.3662 cv
f
41.1855 37.8311 mo
47.9336 37.8311 ln
48.0259 39.7705 ln
47.7939 39.7705 ln
47.748 39.4297 47.688 39.1851 47.6104 39.0381 cv
47.4854 38.8027 47.3179 38.6304 47.1084 38.5181 cv
46.8984 38.4043 46.623 38.3496 46.2817 38.3496 cv
45.1177 38.3496 ln
45.1177 44.665 ln
45.1177 45.1753 45.1724 45.4907 45.2822 45.6177 cv
45.436 45.7866 45.6738 45.8716 45.9961 45.8716 cv
46.2817 45.8716 ln
46.2817 46.0981 ln
42.7769 46.0981 ln
42.7769 45.8716 ln
43.0693 45.8716 ln
43.4175 45.8716 43.6675 45.7681 43.813 45.5542 cv
43.9028 45.4243 43.9478 45.1309 43.9478 44.665 cv
43.9478 38.3496 ln
42.9546 38.3496 ln
42.5679 38.3496 42.293 38.3784 42.1304 38.4341 cv
41.9194 38.5137 41.7388 38.6616 41.5874 38.8809 cv
41.437 39.0986 41.3481 39.3965 41.3198 39.7705 cv
41.0884 39.7705 ln
41.1855 37.8311 ln
f
53.73 45.8716 mo
54.0298 45.8716 ln
54.0298 46.0981 ln
50.4878 46.0981 ln
50.4878 45.8716 ln
50.7798 45.8716 ln
51.1226 45.8716 51.3696 45.7734 51.5234 45.5728 cv
51.6216 45.4438 51.6704 45.1309 51.6704 44.6353 cv
51.6704 39.2939 ln
51.6704 38.8774 51.6436 38.6001 51.5913 38.4648 cv
51.5498 38.3638 51.4673 38.2773 51.3408 38.2026 cv
51.1631 38.1074 50.9761 38.0591 50.7798 38.0591 cv
50.4878 38.0591 ln
50.4878 37.8311 ln
54.0298 37.8311 ln
54.0298 38.0591 ln
53.73 38.0591 ln
53.3936 38.0591 53.1465 38.1577 52.9932 38.356 cv
52.8916 38.4854 52.8408 38.7988 52.8408 39.2939 cv
52.8408 44.6353 ln
52.8408 45.0537 52.8677 45.3291 52.9204 45.4644 cv
52.9614 45.5645 53.0454 45.6509 53.1768 45.7261 cv
53.3501 45.8237 53.5366 45.8716 53.73 45.8716 cv
f
63.2598 38.9175 mo
63.8159 39.6128 64.0938 40.667 64.0938 42.0806 cv
64.0938 43.3853 63.8423 44.3403 63.3354 44.9463 cv
62.8301 45.5522 62.188 45.854 61.4121 45.854 cv
60.6851 45.854 60.1001 45.5767 59.6558 45.0249 cv
59.0786 44.2974 58.7915 43.2588 58.7915 41.9102 cv
58.7915 40.5938 59.0698 39.5933 59.6255 38.9116 cv
60.0728 38.3638 60.6665 38.0879 61.4058 38.0879 cv
62.1938 38.0879 62.812 38.3638 63.2598 38.9175 cv
cp
58.7354 38.7222 mo
57.8418 39.5513 57.3955 40.6216 57.3955 41.9336 cv
57.3955 43.2173 57.7827 44.2656 58.5566 45.0737 cv
59.3296 45.8828 60.2876 46.2876 61.4248 46.2876 cv
62.5498 46.2876 63.5088 45.8716 64.3027 45.0439 cv
65.0947 44.2153 65.4902 43.1724 65.4902 41.916 cv
65.4902 40.6973 65.0977 39.6797 64.3115 38.8657 cv
63.5249 38.0503 62.5962 37.6411 61.5215 37.6411 cv
60.4409 37.6411 59.5122 38.0039 58.7354 38.7222 cv
f
142.955 38.9175 mo
143.512 39.6128 143.792 40.667 143.792 42.0806 cv
143.792 43.3853 143.538 44.3403 143.032 44.9463 cv
142.524 45.5522 141.886 45.854 141.108 45.854 cv
140.382 45.854 139.796 45.5767 139.354 45.0249 cv
138.775 44.2974 138.487 43.2588 138.487 41.9102 cv
138.487 40.5938 138.765 39.5933 139.322 38.9116 cv
139.77 38.3638 140.362 38.0879 141.102 38.0879 cv
141.889 38.0879 142.508 38.3638 142.955 38.9175 cv
cp
138.431 38.7222 mo
137.539 39.5513 137.093 40.6216 137.093 41.9336 cv
137.093 43.2173 137.478 44.2656 138.251 45.0737 cv
139.027 45.8828 139.982 46.2876 141.121 46.2876 cv
142.246 46.2876 143.206 45.8716 143.998 45.0439 cv
144.79 44.2153 145.186 43.1724 145.186 41.916 cv
145.186 40.6973 144.792 39.6797 144.006 38.8657 cv
143.221 38.0503 142.291 37.6411 141.218 37.6411 cv
140.138 37.6411 139.207 38.0039 138.431 38.7222 cv
f
151.551 38.2944 mo
152.084 38.2944 152.512 38.458 152.836 38.7798 cv
153.16 39.103 153.321 39.5234 153.321 40.0391 cv
153.321 40.5679 153.119 41.0024 152.72 41.3413 cv
152.321 41.6851 151.726 41.8564 150.937 41.8564 cv
150.901 41.8564 150.854 41.854 150.798 41.8521 cv
150.74 41.8506 150.673 41.8486 150.595 41.8486 cv
150.595 38.4102 ln
150.999 38.3335 151.317 38.2944 151.551 38.2944 cv
cp
155.371 45.5312 mo
155.088 45.3521 154.753 44.9912 154.362 44.4463 cv
152.657 42.0728 ln
153.352 41.9189 153.863 41.6582 154.195 41.2812 cv
154.526 40.9087 154.692 40.4688 154.692 39.9585 cv
154.692 39.4834 154.547 39.0737 154.256 38.731 cv
153.965 38.3853 153.612 38.1519 153.196 38.0229 cv
152.779 37.8955 152.133 37.8311 151.254 37.8311 cv
148.243 37.8311 ln
148.243 38.0591 ln
148.552 38.0591 ln
148.866 38.0591 149.102 38.146 149.26 38.3257 cv
149.375 38.4521 149.432 38.7769 149.432 39.2939 cv
149.432 44.6353 ln
149.432 45.1074 149.387 45.4038 149.306 45.5312 cv
149.152 45.7593 148.903 45.8716 148.552 45.8716 cv
148.243 45.8716 ln
148.243 46.0981 ln
151.785 46.0981 ln
151.785 45.8716 ln
151.461 45.8716 ln
151.152 45.8716 150.921 45.7832 150.767 45.6025 cv
150.651 45.4785 150.595 45.1548 150.595 44.6353 cv
150.595 42.2344 ln
150.661 42.2368 150.722 42.2397 150.784 42.2422 cv
150.847 42.2441 150.902 42.2461 150.955 42.2461 cv
151.087 42.2461 151.254 42.2397 151.461 42.2344 cv
154.259 46.0981 ln
156.466 46.0981 ln
156.466 45.8716 ln
156.016 45.8237 155.649 45.7095 155.371 45.5312 cv
f
161.489 39.5371 mo
162.892 42.8794 ln
160.051 42.8794 ln
161.489 39.5371 ln
cp
163.806 45.3662 mo
163.806 45.5005 163.75 45.6138 163.633 45.7075 cv
163.517 45.8022 163.295 45.856 162.966 45.8716 cv
162.966 46.0981 ln
166.225 46.0981 ln
166.225 45.8716 ln
165.89 45.8521 165.627 45.7598 165.438 45.5962 cv
165.248 45.4302 165.037 45.0723 164.807 44.5181 cv
161.928 37.6411 ln
161.717 37.6411 ln
158.808 44.4463 ln
158.554 45.0439 158.326 45.4395 158.12 45.6348 cv
158.018 45.7319 157.792 45.8115 157.447 45.8716 cv
157.447 46.0981 ln
160.051 46.0981 ln
160.051 45.8716 ln
159.653 45.8442 159.395 45.7803 159.274 45.6875 cv
159.155 45.5923 159.094 45.4785 159.094 45.3555 cv
159.094 45.1968 159.162 44.9556 159.301 44.6353 cv
159.864 43.3301 ln
163.063 43.3301 ln
163.562 44.5181 ln
163.724 44.9048 163.806 45.1865 163.806 45.3662 cv
f
167.56 37.8311 mo
174.309 37.8311 ln
174.4 39.7705 ln
174.168 39.7705 ln
174.122 39.4297 174.061 39.1851 173.985 39.0381 cv
173.857 38.8027 173.69 38.6304 173.483 38.5181 cv
173.272 38.4043 172.997 38.3496 172.656 38.3496 cv
171.491 38.3496 ln
171.491 44.665 ln
171.491 45.1753 171.546 45.4907 171.656 45.6177 cv
171.811 45.7866 172.048 45.8716 172.369 45.8716 cv
172.656 45.8716 ln
172.656 46.0981 ln
169.151 46.0981 ln
169.151 45.8716 ln
169.443 45.8716 ln
169.792 45.8716 170.04 45.7681 170.186 45.5542 cv
170.276 45.4243 170.321 45.1309 170.321 44.665 cv
170.321 38.3496 ln
169.327 38.3496 ln
168.941 38.3496 168.667 38.3784 168.506 38.4341 cv
168.292 38.5137 168.112 38.6616 167.96 38.8809 cv
167.812 39.0986 167.722 39.3965 167.694 39.7705 cv
167.463 39.7705 ln
167.56 37.8311 ln
f
182.462 38.9175 mo
183.021 39.6128 183.299 40.667 183.299 42.0806 cv
183.299 43.3853 183.046 44.3403 182.541 44.9463 cv
182.035 45.5522 181.393 45.854 180.617 45.854 cv
179.89 45.854 179.305 45.5767 178.862 45.0249 cv
178.284 44.2974 177.994 43.2588 177.994 41.9102 cv
177.994 40.5938 178.273 39.5933 178.83 38.9116 cv
179.278 38.3638 179.871 38.0879 180.609 38.0879 cv
181.399 38.0879 182.017 38.3638 182.462 38.9175 cv
cp
177.94 38.7222 mo
177.046 39.5513 176.6 40.6216 176.6 41.9336 cv
176.6 43.2173 176.986 44.2656 177.761 45.0737 cv
178.536 45.8828 179.493 46.2876 180.629 46.2876 cv
181.755 46.2876 182.714 45.8716 183.505 45.0439 cv
184.298 44.2153 184.694 43.1724 184.694 41.916 cv
184.694 40.6973 184.302 39.6797 183.517 38.8657 cv
182.729 38.0503 181.798 37.6411 180.726 37.6411 cv
179.646 37.6411 178.717 38.0039 177.94 38.7222 cv
f
190.849 38.2944 mo
191.383 38.2944 191.809 38.458 192.132 38.7798 cv
192.455 39.103 192.617 39.5234 192.617 40.0391 cv
192.617 40.5679 192.417 41.0024 192.017 41.3413 cv
191.616 41.6851 191.021 41.8564 190.234 41.8564 cv
190.197 41.8564 190.15 41.854 190.094 41.8521 cv
190.036 41.8506 189.968 41.8486 189.893 41.8486 cv
189.893 38.4102 ln
190.294 38.3335 190.613 38.2944 190.849 38.2944 cv
cp
194.664 45.5312 mo
194.385 45.3521 194.049 44.9912 193.659 44.4463 cv
191.952 42.0728 ln
192.646 41.9189 193.16 41.6582 193.493 41.2812 cv
193.825 40.9087 193.989 40.4688 193.989 39.9585 cv
193.989 39.4834 193.843 39.0737 193.552 38.731 cv
193.261 38.3853 192.909 38.1519 192.493 38.0229 cv
192.076 37.8955 191.426 37.8311 190.55 37.8311 cv
187.54 37.8311 ln
187.54 38.0591 ln
187.849 38.0591 ln
188.162 38.0591 188.398 38.146 188.557 38.3257 cv
188.67 38.4521 188.727 38.7769 188.727 39.2939 cv
188.727 44.6353 ln
188.727 45.1074 188.685 45.4038 188.599 45.5312 cv
188.449 45.7593 188.2 45.8716 187.849 45.8716 cv
187.54 45.8716 ln
187.54 46.0981 ln
191.083 46.0981 ln
191.083 45.8716 ln
190.758 45.8716 ln
190.448 45.8716 190.217 45.7832 190.062 45.6025 cv
189.95 45.4785 189.893 45.1548 189.893 44.6353 cv
189.893 42.2344 ln
189.958 42.2368 190.021 42.2397 190.08 42.2422 cv
190.141 42.2441 190.2 42.2461 190.25 42.2461 cv
190.38 42.2461 190.55 42.2397 190.758 42.2344 cv
193.555 46.0981 ln
195.764 46.0981 ln
195.764 45.8716 ln
195.311 45.8237 194.945 45.7095 194.664 45.5312 cv
f
202.364 38.0591 mo
202.364 37.8311 ln
205.247 37.8311 ln
205.247 38.0591 ln
205.089 38.0591 ln
204.983 38.0591 204.83 38.104 204.624 38.1987 cv
204.421 38.291 204.236 38.4258 204.071 38.6001 cv
203.904 38.7769 203.699 39.0591 203.454 39.4526 cv
201.46 42.5933 ln
201.46 44.665 ln
201.46 45.1753 201.519 45.4907 201.633 45.6177 cv
201.787 45.7866 202.031 45.8716 202.364 45.8716 cv
202.63 45.8716 ln
202.63 46.0981 ln
199.12 46.0981 ln
199.12 45.8716 ln
199.413 45.8716 ln
199.762 45.8716 200.012 45.7681 200.158 45.5542 cv
200.245 45.4243 200.29 45.1309 200.29 44.665 cv
200.29 42.7065 ln
198.023 39.2451 ln
197.754 38.8398 197.573 38.5845 197.477 38.4834 cv
197.382 38.3833 197.185 38.2612 196.882 38.1177 cv
196.803 38.0786 196.684 38.0591 196.53 38.0591 cv
196.53 37.8311 ln
200.065 37.8311 ln
200.065 38.0591 ln
199.882 38.0591 ln
199.692 38.0591 199.516 38.1016 199.356 38.1904 cv
199.195 38.2808 199.115 38.4165 199.115 38.5928 cv
199.115 38.7412 199.238 39.0054 199.485 39.3867 cv
201.212 42.0518 ln
202.833 39.5015 ln
203.077 39.1196 203.2 38.8364 203.2 38.6494 cv
203.2 38.5337 203.169 38.4331 203.111 38.3428 cv
203.051 38.2554 202.967 38.1836 202.858 38.1348 cv
202.748 38.0825 202.582 38.0591 202.364 38.0591 cv
f
97.8545 43.8115 mo
98.0562 43.8545 ln
97.3496 46.0981 ln
90.9487 46.0981 ln
90.9487 45.8716 ln
91.2588 45.8716 ln
91.6084 45.8716 91.8579 45.7593 92.0078 45.5312 cv
92.0938 45.4004 92.1362 45.1001 92.1362 44.6294 cv
92.1362 39.2939 ln
92.1362 38.7798 92.0786 38.4556 91.9663 38.3257 cv
91.8076 38.146 91.5713 38.0591 91.2588 38.0591 cv
90.9487 38.0591 ln
90.9487 37.8311 ln
94.6904 37.8311 ln
94.6904 38.0591 ln
94.252 38.0518 93.9434 38.0938 93.7661 38.1797 cv
93.5913 38.2642 93.4692 38.373 93.4058 38.5024 cv
93.3398 38.6333 93.3066 38.9434 93.3066 39.4346 cv
93.3066 44.6294 ln
93.3066 44.9653 93.3398 45.1987 93.4058 45.3228 cv
93.4546 45.4097 93.5283 45.4712 93.6299 45.5122 cv
93.7314 45.5542 94.0479 45.5728 94.5811 45.5728 cv
95.1855 45.5728 ln
95.8193 45.5728 96.2637 45.5283 96.5195 45.4336 cv
96.7754 45.3398 97.0098 45.1753 97.2207 44.937 cv
97.4321 44.6992 97.6436 44.3237 97.8545 43.8115 cv
f
113.969 43.8115 mo
114.168 43.8545 ln
113.461 46.0981 ln
107.062 46.0981 ln
107.062 45.8716 ln
107.372 45.8716 ln
107.722 45.8716 107.972 45.7593 108.122 45.5312 cv
108.207 45.4004 108.251 45.1001 108.251 44.6294 cv
108.251 39.2939 ln
108.251 38.7798 108.193 38.4556 108.08 38.3257 cv
107.921 38.146 107.685 38.0591 107.372 38.0591 cv
107.062 38.0591 ln
107.062 37.8311 ln
110.805 37.8311 ln
110.805 38.0591 ln
110.365 38.0518 110.058 38.0938 109.88 38.1797 cv
109.705 38.2642 109.583 38.373 109.519 38.5024 cv
109.454 38.6333 109.421 38.9434 109.421 39.4346 cv
109.421 44.6294 ln
109.421 44.9653 109.454 45.1987 109.519 45.3228 cv
109.567 45.4097 109.643 45.4712 109.744 45.5122 cv
109.845 45.5542 110.163 45.5728 110.695 45.5728 cv
111.299 45.5728 ln
111.932 45.5728 112.377 45.5283 112.634 45.4336 cv
112.89 45.3398 113.123 45.1753 113.335 44.937 cv
113.546 44.6992 113.756 44.3237 113.969 43.8115 cv
f
119.245 39.5371 mo
120.647 42.8794 ln
117.807 42.8794 ln
119.245 39.5371 ln
cp
121.563 45.3662 mo
121.563 45.5005 121.503 45.6138 121.389 45.7075 cv
121.272 45.8022 121.05 45.856 120.722 45.8716 cv
120.722 46.0981 ln
123.982 46.0981 ln
123.982 45.8716 ln
123.645 45.8521 123.382 45.7598 123.193 45.5962 cv
123.003 45.4302 122.794 45.0723 122.561 44.5181 cv
119.684 37.6411 ln
119.472 37.6411 ln
116.564 44.4463 ln
116.311 45.0439 116.083 45.4395 115.874 45.6348 cv
115.774 45.7319 115.549 45.8115 115.204 45.8716 cv
115.204 46.0981 ln
117.807 46.0981 ln
117.807 45.8716 ln
117.409 45.8442 117.15 45.7803 117.031 45.6875 cv
116.91 45.5923 116.85 45.4785 116.85 45.3555 cv
116.85 45.1968 116.919 44.9556 117.057 44.6353 cv
117.619 43.3301 ln
120.819 43.3301 ln
121.319 44.5181 ln
121.481 44.9048 121.563 45.1865 121.563 45.3662 cv
f
129.633 38.2393 mo
130.389 38.2393 130.963 38.4102 131.356 38.7515 cv
131.752 39.0928 131.949 39.5059 131.949 39.9897 cv
131.949 40.3037 131.871 40.5908 131.711 40.853 cv
131.553 41.1201 131.325 41.3164 131.026 41.4438 cv
130.728 41.5713 130.28 41.6348 129.688 41.6348 cv
129.455 41.6348 129.245 41.6284 129.049 41.6143 cv
128.858 41.6006 128.686 41.5781 128.536 41.5503 cv
128.536 38.3745 ln
128.86 38.2847 129.227 38.2393 129.633 38.2393 cv
cp
132.846 41.1514 mo
133.097 40.8242 133.225 40.4531 133.225 40.0391 cv
133.225 39.5562 133.063 39.127 132.741 38.7529 cv
132.42 38.3853 131.958 38.124 131.345 37.9771 cv
130.944 37.8799 130.408 37.8311 129.742 37.8311 cv
126.168 37.8311 ln
126.168 38.0591 ln
126.481 38.0591 ln
126.793 38.0591 127.03 38.146 127.189 38.3257 cv
127.306 38.4595 127.366 38.7842 127.366 39.2939 cv
127.366 44.6353 ln
127.366 45.0972 127.319 45.4004 127.226 45.5435 cv
127.076 45.7622 126.827 45.8716 126.481 45.8716 cv
126.168 45.8716 ln
126.168 46.0981 ln
130.072 46.0981 ln
131.002 46.0981 131.694 46.0112 132.148 45.8394 cv
132.602 45.6665 132.958 45.3926 133.218 45.0156 cv
133.479 44.6387 133.607 44.2471 133.607 43.8369 cv
133.607 43.2969 133.41 42.8394 133.016 42.4658 cv
132.731 42.1973 132.302 42.0029 131.73 41.8779 cv
132.221 41.7212 132.594 41.4771 132.846 41.1514 cv
cp
128.967 42.0693 mo
129.147 42.0601 129.361 42.0566 129.614 42.0566 cv
130.196 42.0566 130.684 42.1401 131.078 42.3125 cv
131.474 42.4829 131.756 42.7168 131.931 43.0137 cv
132.107 43.311 132.194 43.6187 132.194 43.9395 cv
132.194 44.4292 132 44.8379 131.616 45.1685 cv
131.229 45.5005 130.667 45.6655 129.932 45.6655 cv
129.472 45.6655 129.006 45.6108 128.536 45.5005 cv
128.536 42.1108 ln
128.645 42.0923 128.79 42.0771 128.967 42.0693 cv
f
83.394 39.5371 mo
84.7969 42.8794 ln
81.9556 42.8794 ln
83.394 39.5371 ln
cp
85.7109 45.3662 mo
85.7109 45.5005 85.6533 45.6138 85.5391 45.7075 cv
85.4214 45.8022 85.2002 45.856 84.8701 45.8716 cv
84.8701 46.0981 ln
88.1318 46.0981 ln
88.1318 45.8716 ln
87.7939 45.8521 87.5308 45.7598 87.3418 45.5962 cv
87.1519 45.4302 86.9434 45.0723 86.7109 44.5181 cv
83.834 37.6411 ln
83.6201 37.6411 ln
80.7124 44.4463 ln
80.4595 45.0439 80.231 45.4395 80.0249 45.6348 cv
79.9219 45.7319 79.6982 45.8115 79.353 45.8716 cv
79.353 46.0981 ln
81.9556 46.0981 ln
81.9556 45.8716 ln
81.5581 45.8442 81.2988 45.7803 81.1792 45.6875 cv
81.0596 45.5923 80.9985 45.4785 80.9985 45.3555 cv
80.9985 45.1968 81.0674 44.9556 81.2065 44.6353 cv
81.7676 43.3301 ln
84.9678 43.3301 ln
85.4673 44.5181 ln
85.6299 44.9048 85.7109 45.1865 85.7109 45.3662 cv
f
68.0391 38.0591 mo
68.0391 37.8311 ln
70.2817 37.8311 ln
75.3369 44.0312 ln
75.3369 39.2642 ln
75.3369 38.7554 75.2793 38.4395 75.165 38.3135 cv
75.0146 38.1421 74.7769 38.0591 74.4521 38.0591 cv
74.165 38.0591 ln
74.165 37.8311 ln
77.042 37.8311 ln
77.042 38.0591 ln
76.749 38.0591 ln
76.4004 38.0591 76.1533 38.1631 76.0063 38.3745 cv
75.916 38.5044 75.8721 38.7998 75.8721 39.2642 cv
75.8721 46.2329 ln
75.6523 46.2329 ln
70.2036 39.5752 ln
70.2036 44.665 ln
70.2036 45.1753 70.2583 45.4907 70.3677 45.6177 cv
70.522 45.7866 70.7603 45.8716 71.0815 45.8716 cv
71.3735 45.8716 ln
71.3735 46.0981 ln
68.4956 46.0981 ln
68.4956 45.8716 ln
68.7827 45.8716 ln
69.1357 45.8716 69.3862 45.7681 69.5332 45.5542 cv
69.6216 45.4243 69.666 45.1309 69.666 44.665 cv
69.666 38.9175 ln
69.4272 38.6377 69.2446 38.4521 69.1206 38.3638 cv
68.998 38.2739 68.8149 38.1885 68.5747 38.1128 cv
68.457 38.0747 68.2788 38.0591 68.0391 38.0591 cv
f
133.189 33.7861 mo
126.481 33.7861 ln
126.481 26.979 ln
124.236 26.979 ln
124.236 33.7861 ln
117.529 33.7861 ln
117.528 17.7769 ln
124.236 17.7769 ln
124.236 23.5591 ln
126.481 23.5591 ln
126.481 17.7769 ln
133.189 17.7769 ln
133.189 33.7861 ln
f
197.102 33.7861 mo
191.211 33.7861 ln
187.811 26.4907 ln
187.637 26.4907 ln
187.637 33.7861 ln
182.057 33.7861 ln
182.057 17.7769 ln
187.672 17.7769 ln
191.35 24.9907 ln
191.524 24.9907 ln
191.524 17.7769 ln
197.102 17.7769 ln
197.102 33.7861 ln
f
180.488 33.7861 mo
168.883 33.7861 ln
168.883 17.7769 ln
180.375 17.7769 ln
180.375 20.8242 ln
175.565 20.8242 ln
175.565 24.0815 ln
180.054 24.0815 ln
180.054 26.979 ln
175.565 26.979 ln
175.565 30.6743 ln
180.488 30.6729 ln
180.488 33.7861 ln
f
116.691 33.7861 mo
109.458 33.7861 ln
106.699 26.9146 ln
106.521 26.9146 ln
106.521 33.7861 ln
99.8135 33.7861 ln
99.8135 17.7769 ln
106.521 17.7769 ln
106.521 23.9883 ln
106.695 23.9883 ln
109.731 17.7769 ln
116.303 17.7769 ln
112.385 24.9883 ln
116.691 33.7861 ln
f
80.3135 24.106 mo
80.3135 23.0874 80.3291 21.9639 80.1284 20.9639 cv
79.5273 17.9907 75.4766 17.4399 72.3481 17.4399 cv
69.2188 17.4399 65.1675 17.9907 64.5688 20.9639 cv
64.3657 21.9639 64.3818 23.0874 64.3818 24.106 cv
64.3818 27.5259 ln
64.3818 28.5444 64.3657 29.666 64.5688 30.6694 cv
65.1675 33.6416 69.2188 34.1924 72.3481 34.1924 cv
75.4766 34.1924 79.5273 33.6416 80.1284 30.6694 cv
80.3291 29.666 80.3135 28.5444 80.3135 27.5259 cv
80.3135 24.106 ln
cp
73.6851 29.5674 mo
73.6851 30.5488 73.5684 31.4209 72.3481 31.4209 cv
71.1245 31.4209 71.0098 30.5488 71.0098 29.5674 cv
71.0098 22.0635 ln
71.0098 21.084 71.1245 20.2109 72.3481 20.2109 cv
73.5684 20.2109 73.6851 21.084 73.6851 22.0635 cv
73.6851 29.5674 ln
f
62.9043 33.7861 mo
56.3452 33.7861 ln
56.3452 33.7861 56.2642 29.6821 56.2373 28.4058 cv
56.2109 27.1641 55.8296 26.9219 54.8066 26.9219 cv
54.499 26.9219 53.7109 26.9219 53.7109 26.9219 cv
53.7109 33.7861 ln
47.1431 33.7861 ln
47.1431 17.7769 ln
56.4316 17.7769 ln
58.7246 17.7769 60.1655 17.8872 61.1372 18.4668 cv
62.3296 19.1763 62.7173 20.1504 62.7173 22.02 cv
62.7173 24.4414 61.4878 25.6113 59.0029 25.7549 cv
59.0029 25.9375 ln
60.1362 26.1089 61.2358 26.2529 61.9536 26.8784 cv
62.6763 27.5083 62.7764 28.3511 62.7974 29.3228 cv
62.8193 30.2842 62.9043 33.7861 62.9043 33.7861 cv
cp
54.6743 24.5625 mo
55.5918 24.5625 56.2368 24.2197 56.2368 23.0146 cv
56.2368 21.6172 ln
56.2368 20.7119 55.6357 20.2969 54.9097 20.2969 cv
54.5229 20.2969 53.7109 20.2969 53.7109 20.2969 cv
53.7109 24.5625 ln
54.0469 24.5625 54.3735 24.5625 54.6743 24.5625 cv
f
45.4854 29.2603 mo
45.4854 30.9766 45.3506 31.9336 44.0825 32.8262 cv
42.9346 33.6338 40.7832 33.7832 39.2456 33.7861 cv
29.6274 33.7861 ln
29.6274 17.7769 ln
39.7686 17.7769 ln
41.855 17.7769 43.125 17.9648 44.0181 18.772 cv
44.7407 19.4224 44.9946 20.1343 44.9946 21.5234 cv
44.9946 23.8271 43.9883 24.8052 41.4727 25.1191 cv
41.4727 25.3003 ln
42.8779 25.4834 43.8452 25.7769 44.5352 26.3999 cv
45.1787 26.979 45.4854 27.6138 45.4854 29.2603 cv
cp
37.2344 31.1895 mo
38.1636 31.1895 38.8281 30.9014 38.8281 29.5933 cv
38.8281 28.1606 ln
38.8281 26.9448 38.272 26.5757 37.3281 26.5757 cv
36.9297 26.5757 36.2026 26.5757 36.2026 26.5757 cv
36.2026 31.1895 ln
36.2026 31.1895 36.958 31.1895 37.2344 31.1895 cv
cp
37.2334 24.2207 mo
38.1626 24.2207 38.7773 23.9326 38.7773 22.6255 cv
38.7764 21.8604 ln
38.7764 20.6426 38.272 20.2734 37.3281 20.2734 cv
36.9277 20.2734 36.2026 20.2734 36.2026 20.2734 cv
36.2026 24.2207 ln
36.2026 24.2207 36.958 24.2207 37.2334 24.2207 cv
f
97.9673 24.106 mo
97.9673 23.0874 97.9814 21.9639 97.7798 20.9639 cv
97.1802 17.9907 93.1304 17.4399 90.0015 17.4399 cv
86.8726 17.4399 82.8213 17.9907 82.2212 20.9639 cv
82.019 21.9639 82.0371 23.0874 82.0371 24.106 cv
82.0371 27.5259 ln
82.0371 28.5444 82.019 29.666 82.2212 30.6694 cv
82.8213 33.6416 86.8726 34.1924 90.0015 34.1924 cv
93.1304 34.1924 97.1802 33.6416 97.7798 30.6694 cv
97.9814 29.666 97.9673 28.5444 97.9673 27.5259 cv
97.9673 24.106 ln
cp
91.3379 29.5674 mo
91.3379 30.5488 91.2236 31.4209 90.0015 31.4209 cv
88.7798 31.4209 88.6636 30.5488 88.6636 29.5674 cv
88.6636 22.0635 ln
88.6636 21.084 88.7798 20.2109 90.0015 20.2109 cv
91.2236 20.2109 91.3379 21.084 91.3379 22.0635 cv
91.3379 29.5674 ln
f
140.897 29.2812 mo
140.9 28.7505 141.105 28.2539 141.481 27.8804 cv
141.859 27.5068 142.358 27.3032 142.891 27.3042 cv
143.416 27.3062 143.913 27.5142 144.289 27.8887 cv
144.664 28.2661 144.867 28.7656 144.865 29.2974 cv
144.862 30.3892 143.966 31.2773 142.875 31.2729 cv
141.778 31.2705 140.893 30.376 140.897 29.2812 cv
0 1 1 0 cmyk
f
160.992 17.7769 mo
159.481 29.2173 ln
159.031 29.2173 ln
157.378 17.7769 ln
154.841 17.7769 ln
153.73 18.9902 152.525 20.2593 151.229 21.5815 cv
154.106 33.7861 ln
164.417 33.7861 ln
168.04 17.7769 ln
160.992 17.7769 ln
0 0 0 1 cmyk
f
139.918 29.2783 mo
139.919 28.4863 140.232 27.7451 140.794 27.187 cv
141.138 26.8442 141.55 26.5967 142 26.4585 cv
142.587 21.9438 ln
143.037 21.9438 ln
143.673 26.4321 ln
144.02 26.5259 144.346 26.6851 144.637 26.9004 cv
146.252 25.0205 147.672 23.3022 148.897 21.7461 cv
147.962 17.7769 ln
137.649 17.7769 ln
134.028 33.7861 ln
141.048 33.7861 ln
141.307 31.7998 ln
140.469 31.2729 139.915 30.3394 139.918 29.2783 cv
f
149.314 23.5093 mo
148.029 24.7856 146.664 26.1074 145.228 27.4751 cv
145.628 27.9941 145.846 28.6318 145.843 29.3003 cv
145.842 30.3623 145.277 31.2915 144.436 31.8105 cv
144.716 33.7861 ln
151.735 33.7861 ln
149.314 23.5093 ln
f
